import assert from "assert";
import * as anchor from "@project-serum/anchor";
import { Program, web3 } from "@project-serum/anchor";
import { TOKEN_PROGRAM_ID, Token } from "@solana/spl-token";
import { MarinadeReferral } from "../target/types/marinade_referral";

const { Keypair, SystemProgram, PublicKey, SYSVAR_RENT_PUBKEY } = web3;

describe("marinade-referral", () => {
    // Local cluster provider.
    const provider = anchor.Provider.env();

    // Configure the client to use the local cluster.
    anchor.setProvider(provider);

    const program = anchor.workspace
        .MarinadeReferral as Program<MarinadeReferral>;

    // referral code
    const REF_CODE = "ref0001";

    // referral state PDA
    let referralPda: InstanceType<typeof PublicKey>;

    // mSOL token mint
    let mSolMint: Token;
    // mSOL mint authority, maybe marinade main program id
    const mSolMintAuthority = Keypair.generate();

    // partner account
    const partner = Keypair.generate();

    it("should initialize referral state", async () => {
        // Airdrop SOLs to the partner.
        await provider.connection.confirmTransaction(
            await provider.connection.requestAirdrop(
                partner.publicKey,
                10000000000
            ),
            "confirmed"
        );

        // referral state PDA generated by ref code
        const [_referral_pda, _referral_bump] =
            await PublicKey.findProgramAddress(
                [
                    Buffer.from(anchor.utils.bytes.utf8.encode("referral")),
                    Buffer.from(anchor.utils.bytes.utf8.encode(REF_CODE)),
                ],
                program.programId
            );
        referralPda = _referral_pda;

        // beneficiary
        const [_beneficiary_pda, _beneficiary_bump] =
            await PublicKey.findProgramAddress(
                [
                    Buffer.from(anchor.utils.bytes.utf8.encode("beneficiary")),
                    Buffer.from(anchor.utils.bytes.utf8.encode(REF_CODE)),
                ],
                program.programId
            );

        // create mSOL token mint
        mSolMint = await Token.createMint(
            provider.connection,
            partner,
            mSolMintAuthority.publicKey,
            null,
            0,
            TOKEN_PROGRAM_ID
        );

        // initialize referral PDA
        await program.rpc.initialize(
            REF_CODE,
            _referral_bump,
            _beneficiary_bump,
            {
                accounts: {
                    state: referralPda,
                    msolMint: mSolMint.publicKey,
                    beneficiary: _beneficiary_pda,
                    partnerAccount: partner.publicKey,
                    rent: SYSVAR_RENT_PUBKEY,
                    tokenProgram: TOKEN_PROGRAM_ID,
                    systemProgram: SystemProgram.programId,
                },
                signers: [partner],
            }
        );

        // get PDA state
        const referralState = await program.account.referralState.fetch(
            referralPda
        );
        // check if partner address matches what we expect
        assert.ok(referralState.partnerAccount.equals(partner.publicKey));
    });

    it("should update emergency pause", async () => {
        // pause referral
        await program.rpc.pause(true, {
            accounts: {
                state: referralPda,
                partnerAccount: partner.publicKey,
            },
            signers: [partner],
        });

        // get PDA state
        const pausedReferralState = await program.account.referralState.fetch(
            referralPda
        );
        // check if paused
        assert.ok(pausedReferralState.pause === true);

        // resume referral
        await program.rpc.pause(false, {
            accounts: {
                state: referralPda,
                partnerAccount: partner.publicKey,
            },
            signers: [partner],
        });

        // get PDA state
        const referralState = await program.account.referralState.fetch(
            referralPda
        );
        // check if resumed
        assert.ok(referralState.pause === false);
    });

    it("should not update emergency pause", async () => {
        // generate an anonymous account
        const anonymous = Keypair.generate();

        // it should reject for anonymous users to update emergency pause
        await assert.rejects(
            async () => {
                await program.rpc.pause(true, {
                    accounts: {
                        state: referralPda,
                        partnerAccount: anonymous.publicKey,
                    },
                    signers: [anonymous],
                });
            },
            {
                message: "65440: FFA0 Unexpected account",
            }
        );
    });
});
